% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flywire-api.R
\name{flywire_cloudvolume}
\alias{flywire_cloudvolume}
\title{Low level access to FlyWire data via Python cloudvolume module}
\usage{
flywire_cloudvolume(cloudvolume.url = NULL, cached = TRUE, ...)
}
\arguments{
\item{cloudvolume.url}{URL for CloudVolume to fetch segmentation image data.
The default value of NULL chooses the flywire production segmentation
dataset.}

\item{cached}{When \code{TRUE} (the default) reuses a cached CloudVolume
object from the current Python session. See details.}

\item{...}{Additional arguments  passed to the CloudVolume constructor}
}
\description{
Low level access to FlyWire data via Python cloudvolume module
}
\details{
this is the equivalent of doing (in Python):

  \verb{from cloudvolume import CloudVolume vol =
  CloudVolume('graphene://https://prodv1.flywire-daf.com/segmentation/table/fly_v31',
  use_https=True)}

  The cache tries to be intelligent by \itemize{

  \item 1. generating a new object for every input parameter combination
  (which of course you would need to do in Python)

  \item 2. avoiding stale references by checking that Python is currently
  running and that the returned CloudVolume object is non-null. It also
  regenerates the object every hour.}

  Note that reticulate the package which allows R/Python interaction binds to
  one Python session. Furthermore Python cannot be restarted without also
  restarting R.
}
\examples{
\dontrun{
cv=flywire_cloudvolume()

# detailed info about the image volume
cv$info
# bounding box (Python format in raw voxels)
cv$bounds
# in nm
boundingbox(cv)

# get help for a function
reticulate::py_help(cv$get_roots)
}
}
