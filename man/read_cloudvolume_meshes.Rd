% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloudvolume-reticulate.R
\name{save_cloudvolume_meshes}
\alias{save_cloudvolume_meshes}
\alias{read_cloudvolume_meshes}
\title{Read meshes from chunked graph (graphene) server via CloudVolume}
\usage{
save_cloudvolume_meshes(
  segments,
  savedir = tempfile(),
  OmitFailures = TRUE,
  Force = FALSE,
  format = c("obj", "ply"),
  ...,
  cloudvolume.url = getOption("fafbseg.cloudvolume.url")
)

read_cloudvolume_meshes(
  segments,
  savedir = NULL,
  ...,
  cloudvolume.url = getOption("fafbseg.cloudvolume.url")
)
}
\arguments{
\item{segments}{The segment ids to fetch (probably as a character vector)}

\item{savedir}{Optional path to a directory in which obj format files will be
stored. If not specified, a temporary directory will be created and removed
at the end of the call.}

\item{OmitFailures}{Whether to omit neurons for which \code{FUN} gives an
error. The default value (\code{NA}) will result in nlapply stopping with
an error message the moment there is an error. For other values, see
details.}

\item{Force}{whether to overwrite a downloaded mesh of the same name}

\item{format}{whether to save meshes in Wavefront obj or Stanford poly
format. obj is the default but ply is a simpler and more compact format.}

\item{...}{Additional arguments passed to \code{save_cloudvolume_meshes} and
then eventually to the Python CloudVolume constructor (see
\url{https://github.com/seung-lab/cloud-volume} for details.}

\item{cloudvolume.url}{Optional url from which to fetch meshes normally
specified by the \code{fafbseg.cloudvolume.url} option.}
}
\value{
A \code{rgl::shapelist3d} list containing one or more \code{mesh3d}
  objects named by the segment id.
}
\description{
\code{save_cloudvolume_meshes} saves meshes to disk.

\code{read_cloudvolume_meshes} uses
  \code{save_cloudvolume_meshes} internally to save meshes to disk and then
  reads them into memory as a \code{\link{neuronlist}}.
}
\details{
You may to use this to fetch meshes from \url{https://flywire.ai}
  among other sources. You may need to select your preferred remote data
  source using \code{\link{choose_segmentation}} (see examples). Under the
  hood, it uses the
  \href{https://github.com/seung-lab/cloud-volume}{CloudVolume} serverless
  Python client for reading data in
  \href{https://github.com/google/neuroglancer/}{Neuroglancer} compatible
  formats. You will therefore need to have a working python3 install of
  CloudVolume.

  Please install the Python CloudVolume module as described at:
  \url{https://github.com/seung-lab/cloud-volume#setup}. You must ensure that
  you are using python3 (implicitly or explicitly) as mesh fetching from
  graphene servers depends on this. This should normally work: \code{pip3
  install cloud-volume}. If you have already installed CloudVolume but it is
  not found, then I recommend editing your \code{\link{Renviron}} file to set
  an environment variable pointing to the correct Python. You can do this
  with \code{usethis::edit_r_environ()} and then setting e.g.
  \code{RETICULATE_PYTHON="/usr/local/bin/python3"}.

  You will normally need to set up some kind of authentication in order to
  fetch data. For flywire, we recommend the function
  \code{\link{flywire_set_token}}. For other data sources or more details,
  see \url{https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson}
  for how to get a token and where to save it. You can either save a json
  snippet to \code{~/.cloudvolume/secrets/chunkedgraph-secret.json} or set an
  environment variable (\code{CHUNKEDGRAPH_SECRET="XXXX"}.

  Finally you will also need to set an option pointing to your server. This
  is most conveniently achieved using e.g.
  \code{choose_segmentation('flywire31')}, which is now the default, but for
  sources without built-in support, you can also specify a full source URL,
  which might look something like

  \code{options(fafbseg.cloudvolume.url='graphene://https://xxx.dynamicannotationframework.com/segmentation/xxx/xxx')}

  You can easily add this to your startup \code{\link{Rprofile}} with
  \code{usethis::edit_r_profile()}.
}
\examples{

\dontrun{
kcmesh=save_cloudvolume_meshes("720575940623755722", savedir=".")
kc=read.neurons(kcmesh)
}
\dontrun{
# The very first time you access FlyWire data you need to get/store a token
flywire_set_token()

# Each R session, you should choose the default segmentation you want
choose_segmentation('flywire31')
pmn1.flywire=read_cloudvolume_meshes("720575940623979522")
pmn1.fafb=read.neuron.catmaid(5321581)

# Read and plot sample KCs from a FlyWire (short) URL
u="https://ngl.flywire.ai/?json_url=https://globalv1.flywire-daf.com/nglstate/6230669436911616"
kcs=read_cloudvolume_meshes(u)
kcs
plot3d(kcs)

nclear3d()
plot3d(pmn1.fafb, col='red', lwd=2, WithNodes = F)
wire3d(pmn1.flywire)

# you can select specific locations like so
library(elmr)
# CATMAID URL
open_fafb(pmn1.flywire[[1]], open=F)
# CATMAID coords to paste into PIN location box
cat(xyzmatrix(catmaid::catmaid_parse_url(open_fafb(pmn1.flywire[[1]], open=F))), sep=',')
# Neuroglancer coords (raw pixels not nm)
open_fafb_ngl(pmn1.flywire[[1]], open=F, coords.only = T)
}
}
\seealso{
\code{\link{choose_segmentation}}. See \code{\link{simple_python}}
  for installation of the necessary Python packages.
}
